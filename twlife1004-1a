
## OAuth2


iKash20
...  import org.springframework.security.oauth2.jwt.Jwt;


github example
... D:\githubcode\spring-boot-react-oauth2-social-login-demo-master\spring-social\src\main\java\com\example\springsocial\security\oauth2\CustomOAuth2UserService.java:
    1: package com.example.springsocial.security.oauth2;
    2  
    3: import com.example.springsocial.exception.OAuth2AuthenticationProcessingException;
    4  import com.example.springsocial.model.AuthProvider;
    5  import com.example.springsocial.model.User;
    6  import com.example.springsocial.repository.UserRepository;
    7  import com.example.springsocial.security.UserPrincipal;
    8: import com.example.springsocial.security.oauth2.user.OAuth2UserInfo;
    9: import com.example.springsocial.security.oauth2.user.OAuth2UserInfoFactory;
   10  import org.springframework.beans.factory.annotation.Autowired;
   11  import org.springframework.security.authentication.InternalAuthenticationServiceException;
   12  import org.springframework.security.core.AuthenticationException;
   13: import org.springframework.security.oauth2.client.userinfo.DefaultOAuth2UserService;
   14: import org.springframework.security.oauth2.client.userinfo.OAuth2UserRequest;
   15: import org.springframework.security.oauth2.core.OAuth2AuthenticationException;
   16: import org.springframework.security.oauth2.core.user.OAuth2User;
   17  import org.springframework.stereotype.Service;
   18  import org.springframework.util.StringUtils;
   ..
   21  
   22  @Service
   23: public class CustomOAuth2UserService extends DefaultOAuth2UserService {
   24  
   25      @Autowired
   ..
   27  
   28      @Override
   29:     public OAuth2User loadUser(OAuth2UserRequest oAuth2UserRequest) throws OAuth2AuthenticationException {
   30:         OAuth2User oAuth2User = super.loadUser(oAuth2UserRequest);
   31  
   32          try {
   33:             return processOAuth2User(oAuth2UserRequest, oAuth2User);
   34          } catch (AuthenticationException ex) {
   35              throw ex;
   36          } catch (Exception ex) {
   37:             // Throwing an instance of AuthenticationException will trigger the OAuth2AuthenticationFailureHandler
   38              throw new InternalAuthenticationServiceException(ex.getMessage(), ex.getCause());
   39          }
   40      }
   41  
   42:     private OAuth2User processOAuth2User(OAuth2UserRequest oAuth2UserRequest, OAuth2User oAuth2User) {
   43:         OAuth2UserInfo oAuth2UserInfo = OAuth2UserInfoFactory.getOAuth2UserInfo(oAuth2UserRequest.getClientRegistration().getRegistrationId(), oAuth2User.getAttributes());
   44:         if(StringUtils.isEmpty(oAuth2UserInfo.getEmail())) {
   45:             throw new OAuth2AuthenticationProcessingException("Email not found from OAuth2 provider");
   46          }
   47  
   48:         Optional<User> userOptional = userRepository.findByEmail(oAuth2UserInfo.getEmail());
   49          User user;
   50          if(userOptional.isPresent()) {
   51              user = userOptional.get();
   52:             if(!user.getProvider().equals(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()))) {
   53:                 throw new OAuth2AuthenticationProcessingException("Looks like you're signed up with " +
   54                          user.getProvider() + " account. Please use your " + user.getProvider() +
   55                          " account to login.");
   56              }
   57:             user = updateExistingUser(user, oAuth2UserInfo);
   58          } else {
   59:             user = registerNewUser(oAuth2UserRequest, oAuth2UserInfo);
   60          }
   61  
   62:         return UserPrincipal.create(user, oAuth2User.getAttributes());
   63      }
   64  
   65:     private User registerNewUser(OAuth2UserRequest oAuth2UserRequest, OAuth2UserInfo oAuth2UserInfo) {
   66          User user = new User();
   67  
   68:         user.setProvider(AuthProvider.valueOf(oAuth2UserRequest.getClientRegistration().getRegistrationId()));
   69:         user.setProviderId(oAuth2UserInfo.getId());
   70:         user.setName(oAuth2UserInfo.getName());
   71:         user.setEmail(oAuth2UserInfo.getEmail());
   72:         user.setImageUrl(oAuth2UserInfo.getImageUrl());
   73          return userRepository.save(user);
   74      }
   75  
   76:     private User updateExistingUser(User existingUser, OAuth2UserInfo oAuth2UserInfo) {
   77:         existingUser.setName(oAuth2UserInfo.getName());
   78:         existingUser.setImageUrl(oAuth2UserInfo.getImageUrl());
   79          return userRepository.save(existingUser);
   80      }



## Spring Security
完全實作在Servlet Filter中 ... DelegatingFilterPorxy 是Spring Security的入口 ... DelegatingFilterPorxy ...

class TokenAuthenticationFilter
... D:\githubcode\spring-boot-react-oauth2-social-login-demo-master\spring-social\src\main\java\com\example\springsocial\security\TokenAuthenticationFilter.java: 

class LogRequestIdFilter
... chase #7832 D:\temp\ikash20\src\main\java\com\twlife\ikash20\ikash20\filter\LogRequestIdFilter.java:
    1: package com.twlife.ikash20.ikash20.filter;
    2  
    3  import java.io.IOException;
    4  
    5: import javax.servlet.FilterChain;
    6  import javax.servlet.ServletException;
    7  import javax.servlet.http.HttpServletRequest;
    .
   12  import org.springframework.core.annotation.Order;
   13  import org.springframework.stereotype.Component;
   14: import org.springframework.web.filter.OncePerRequestFilter;
   15  
   16  import com.twlife.ikash20.ikash20.util.RequestIdUtil;
   ..
   25   */
   26  @Slf4j
   27: public class LogRequestIdFilter extends OncePerRequestFilter { /** 繼承OncePerRequestFilter，確保request只會被filter過濾一次 */ 
   28  
   29      private final String RequestIdResponseHeader = "Request_Token";
   ..
   31  
   32      @Override
   33:     protected void doFilterInternal(final HttpServletRequest request, final HttpServletResponse response, final FilterChain filterChain)
   34          throws ServletException, IOException {
   35              try {
   ..
   43                      log.error("RequestIdResponseHeader的值不存在");
   44                  }
   45:                 filterChain.doFilter(request, response);
   46              } finally {
   47                  MDC.remove(RequestIdRequestIdKey);


5.1、 Spring Security有三個基本的jar檔:
 
l   Core - spring-security-core.jar，只要是用Spring Security就需要此jar。

l   Web - spring-security-web.jar，包括filters與web-security的基礎程式。

l   Config - spring-security-config.jar，包括namespace configuration與Java configuration程式。

5.2、 Security Filters
 
Spring Security完全實作在Servlet Filter中，所以要在我們的Web中使用Spring Security，就要將DelegatingFilterProxy Filter配置到Web應用中。Spring配置的方法有幾種，
原始的方法web.xml配置 ...

filter
5.3、 DelegatingFilterPorxy
 
DelegatingFilterPorxy是Spring Security的入口，我們由下圖看到它其實會帶入更多的filters，這也是Spring為了減少在web.xml上的設定而做的設計。

DelegatingFilterPorxy Class Diagram如下...

DelegatingFilterPorxy使用了FilterChainProxy，就會引用其他的filters進行安全相關的檢核作業。原則上每個filter都要配置，但在Spring Boot中我們僅需依我們需要的部分進行配置，
其他可省略或用預設值即可。以下說明幾個常用的Filter。

5.4、 SecurityContextPersistenceFilter
 
這是Spring Security的第一個filter，主要是載入Security Context，在Security Context中我們可以取得使用者的Authentication物件，裡面有所有處理使用者認證/授權的資料。
若Security Context不存在則會自動建立一個新的。此filter預設會使用HttpSessionSecurityContextRepository，將Security Context存放在Http Session中。
 

